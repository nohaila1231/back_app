"""
Script pour cr√©er des donn√©es de test si la base de donn√©es est vide
"""

import sys
import os
import datetime
import random

# Ajouter le r√©pertoire parent au path pour pouvoir importer les modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from app import app
    from database.db import db
    from models.user import User
    from sqlalchemy import text
    
    print("üîß CR√âATION DE DONN√âES DE TEST")
    print("=" * 40)
    
    with app.app_context():
        # V√©rifier si l'utilisateur ID 38 existe
        user = User.query.get(38)
        
        if not user:
            print("‚ùå Utilisateur ID 38 non trouv√©")
            print("üîç Recherche d'autres utilisateurs...")
            
            users = User.query.all()
            if users:
                print(f"‚úÖ {len(users)} utilisateurs trouv√©s:")
                for u in users[:5]:
                    print(f"   - ID: {u.id}, Nom: {u.fullname}, Email: {u.email}")
                
                # Utiliser le premier utilisateur trouv√©
                test_user = users[0]
                print(f"\nüéØ Utilisation de l'utilisateur ID {test_user.id} pour les tests")
            else:
                print("‚ùå Aucun utilisateur trouv√© dans la base de donn√©es!")
                print("üîß Cr√©ation d'un utilisateur de test...")
                
                # Cr√©er un utilisateur de test
                test_user = User(
                    fullname="Utilisateur Test",
                    email="test@example.com",
                    password="",
                    created_at=datetime.datetime.now()
                )
                db.session.add(test_user)
                db.session.commit()
                print(f"‚úÖ Utilisateur de test cr√©√© avec l'ID {test_user.id}")
        else:
            test_user = user
            print(f"‚úÖ Utilisateur ID 38 trouv√©: {user.fullname}")
        
        # V√©rifier les tables n√©cessaires
        inspector = db.inspect(db.engine)
        tables = inspector.get_table_names()
        
        # Cr√©er des donn√©es de test pour les likes
        if 'likes' in tables:
            with db.engine.connect() as connection:
                # V√©rifier s'il y a d√©j√† des likes pour cet utilisateur
                result = connection.execute(text(f"SELECT COUNT(*) FROM likes WHERE user_id = {test_user.id}"))
                likes_count = result.scalar()
                
                if likes_count == 0:
                    print("üîß Cr√©ation de likes de test...")
                    # Cr√©er quelques likes de test
                    for i in range(5):
                        movie_id = 1000 + i  # IDs de films fictifs
                        try:
                            connection.execute(text(
                                "INSERT INTO likes (user_id, movie_id, created_at) VALUES (:user_id, :movie_id, :created_at)"
                            ), {
                                'user_id': test_user.id,
                                'movie_id': movie_id,
                                'created_at': datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 30))
                            })
                            connection.commit()
                        except Exception as e:
                            print(f"‚ö†Ô∏è Erreur lors de la cr√©ation du like {i}: {str(e)}")
                    print("‚úÖ Likes de test cr√©√©s")
                else:
                    print(f"‚úÖ {likes_count} likes d√©j√† pr√©sents pour l'utilisateur")
        
        # Cr√©er des donn√©es de test pour la watchlist
        if 'watchlists' in tables:
            with db.engine.connect() as connection:
                result = connection.execute(text(f"SELECT COUNT(*) FROM watchlists WHERE user_id = {test_user.id}"))
                watchlist_count = result.scalar()
                
                if watchlist_count == 0:
                    print("üîß Cr√©ation d'√©l√©ments de watchlist de test...")
                    for i in range(3):
                        movie_id = 2000 + i
                        try:
                            connection.execute(text(
                                "INSERT INTO watchlists (user_id, movie_id, created_at) VALUES (:user_id, :movie_id, :created_at)"
                            ), {
                                'user_id': test_user.id,
                                'movie_id': movie_id,
                                'created_at': datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 15))
                            })
                            connection.commit()
                        except Exception as e:
                            print(f"‚ö†Ô∏è Erreur lors de la cr√©ation de l'√©l√©ment watchlist {i}: {str(e)}")
                    print("‚úÖ √âl√©ments de watchlist de test cr√©√©s")
                else:
                    print(f"‚úÖ {watchlist_count} √©l√©ments de watchlist d√©j√† pr√©sents")
        
        # Cr√©er des donn√©es de test pour les commentaires
        if 'comments' in tables:
            with db.engine.connect() as connection:
                result = connection.execute(text(f"SELECT COUNT(*) FROM comments WHERE user_id = {test_user.id}"))
                comments_count = result.scalar()
                
                if comments_count == 0:
                    print("üîß Cr√©ation de commentaires de test...")
                    for i in range(2):
                        movie_id = 3000 + i
                        try:
                            connection.execute(text(
                                "INSERT INTO comments (user_id, movie_id, content, created_at) VALUES (:user_id, :movie_id, :content, :created_at)"
                            ), {
                                'user_id': test_user.id,
                                'movie_id': movie_id,
                                'content': f"Commentaire de test {i+1} - Excellent film!",
                                'created_at': datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 10))
                            })
                            connection.commit()
                        except Exception as e:
                            print(f"‚ö†Ô∏è Erreur lors de la cr√©ation du commentaire {i}: {str(e)}")
                    print("‚úÖ Commentaires de test cr√©√©s")
                else:
                    print(f"‚úÖ {comments_count} commentaires d√©j√† pr√©sents")
        
        print(f"\nüéØ UTILISEZ L'ID {test_user.id} POUR TESTER LA PAGE DE PROFIL")
        print(f"üìß Email: {test_user.email}")
        print(f"üë§ Nom: {test_user.fullname}")
        
        print("\n‚úÖ Cr√©ation de donn√©es de test termin√©e")
        
except Exception as e:
    print(f"‚ùå Erreur: {str(e)}")
    import traceback
    traceback.print_exc()
